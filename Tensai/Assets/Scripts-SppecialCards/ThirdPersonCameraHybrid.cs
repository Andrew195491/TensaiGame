using UnityEngine; // Necesario para MonoBehaviour
using UnityEngine.EventSystems;  // Necesario para EventSystem.current


/// <summary>
/// Sistema de c√°mara en tercera persona h√≠brido que funciona tanto en m√≥vil (touch) como en PC (mouse).
/// Permite orbitar alrededor del jugador con controles t√°ctiles o de rat√≥n.
/// 
/// CARACTER√çSTICAS:
/// - Detecci√≥n autom√°tica de plataforma (m√≥vil/PC)
/// - Prevenci√≥n de conflictos con UI
/// - Rotaci√≥n suave y limitada verticalmente
/// - Sistema de √≥rbita alrededor del objetivo
/// </summary>
public class ThirdPersonCameraHybrid : MonoBehaviour
{
    // ============================================
    // SECCI√ìN 1: CONFIGURACI√ìN DE LA C√ÅMARA
    // ============================================
    
    [Header("Configuraci√≥n de Target")]
    /// <summary>
    /// El objeto que la c√°mara seguir√° (normalmente el jugador).
    /// La c√°mara orbitar√° alrededor de este punto.
    /// </summary>
    public Transform target;
    
    [Header("Ajustes de Posici√≥n")]
    /// <summary>
    /// Distancia radial entre la c√°mara y el target.
    /// Valores mayores = c√°mara m√°s alejada (vista m√°s amplia)
    /// Valores menores = c√°mara m√°s cercana (vista m√°s detallada)
    /// </summary>
    public float distance = 5f;
    
    /// <summary>
    /// Altura vertical de la c√°mara respecto al target.
    /// Valores mayores = vista m√°s elevada (vista de p√°jaro)
    /// Valores menores = vista m√°s baja (a nivel del suelo)
    /// </summary>
    public float height = 2f;
    
    [Header("Ajustes de Control")]
    /// <summary>
    /// Sensibilidad para la rotaci√≥n de la c√°mara.
    /// Valores mayores = movimientos m√°s r√°pidos/bruscos
    /// Valores menores = movimientos m√°s lentos/suaves
    /// T√≠picamente entre 0.1 (lento) y 0.5 (r√°pido)
    /// </summary>
    public float rotationSpeed = 0.2f;

    // ============================================
    // SECCI√ìN 2: VARIABLES DE ESTADO Y ROTACI√ìN
    // ============================================
    
    /// <summary>
    /// √Ångulo actual de rotaci√≥n horizontal (alrededor del eje Y global).
    /// Controla el giro izquierda/derecha alrededor del target.
    /// Valores en grados: 0¬∞ = norte, 90¬∞ = este, 180¬∞ = sur, 270¬∞ = oeste
    /// </summary>
    private float currentX = 0f;
    
    /// <summary>
    /// √Ångulo actual de rotaci√≥n vertical (alrededor del eje X local).
    /// Controla la elevaci√≥n de la c√°mara (arriba/abajo).
    /// Valores en grados: 0¬∞ = horizontal, 90¬∞ = mirando hacia abajo
    /// Comienza en 15¬∞ para una vista ligeramente elevada.
    /// </summary>
    private float currentY = 15f;

    // ====== VARIABLES PARA CONTROL CON MOUSE ======
    
    /// <summary>
    /// √öltima posici√≥n registrada del input (mouse/touch) en p√≠xeles de pantalla.
    /// Se usa para calcular el delta (movimiento) entre frames.
    /// </summary>
    private Vector2 lastInputPos;
    
    /// <summary>
    /// Indica si el usuario est√° arrastrando con el mouse.
    /// true = bot√≥n izquierdo del mouse presionado y arrastrando
    /// false = mouse no est√° siendo arrastrado
    /// </summary>
    private bool isDragging = false;

    // ============================================
    // SECCI√ìN 3: PROPIEDAD P√öBLICA DE ESTADO
    // ============================================
    
    /// <summary>
    /// Propiedad est√°tica que indica si la c√°mara est√° siendo rotada actualmente.
    /// 
    /// UTILIDAD:
    /// - Otros scripts pueden verificar ThirdPersonCameraHybrid.IsCameraDragging
    /// - Permite deshabilitar otras interacciones mientras se ajusta la c√°mara
    /// - √ötil para evitar tirar dados o hacer clic en botones mientras se rota la vista
    /// 
    /// NOTA: Es est√°tica porque t√≠picamente solo hay una c√°mara principal en la escena.
    /// </summary>
    public static bool IsCameraDragging { get; private set; } = false;

    // ============================================
    // SECCI√ìN 4: DETECCI√ìN Y PROCESAMIENTO DE INPUT
    // ============================================
    
    void Update()
    {
        // ========================================
        // SUBSECCI√ìN A: CONTROL T√ÅCTIL (M√ìVIL) üì±
        // ========================================
        
        // Verificar:
        // 1. Exactamente 1 dedo tocando la pantalla
        // 2. El toque NO est√° sobre elementos de UI
        if (Input.touchCount == 1 && !IsPointerOverUI())
        {
            // Obtener informaci√≥n del primer touch
            Touch touch = Input.GetTouch(0);
            
            // Delta = movimiento del dedo en este frame (en p√≠xeles)
            Vector2 delta = touch.deltaPosition;

            // ------ INICIO DEL TOUCH ------
            if (touch.phase == TouchPhase.Began)
            {
                // El usuario comenz√≥ a tocar la pantalla
                // Activar el estado de "rotando c√°mara"
                IsCameraDragging = true;
            }
            
            // ------ FIN DEL TOUCH ------
            else if (touch.phase == TouchPhase.Ended || touch.phase == TouchPhase.Canceled)
            {
                // El usuario levant√≥ el dedo o el touch fue cancelado
                // Desactivar el estado de "rotando c√°mara"
                IsCameraDragging = false;
            }

            // ------ MOVIMIENTO ACTIVO ------
            if (touch.phase == TouchPhase.Moved)
            {
                // Actualizar rotaci√≥n horizontal (izquierda/derecha)
                // delta.x positivo = arrastrar hacia la derecha = girar c√°mara a la derecha
                currentX += delta.x * rotationSpeed;
                
                // Actualizar rotaci√≥n vertical (arriba/abajo)
                // delta.y negativo porque en pantalla Y crece hacia abajo
                // pero queremos que arrastrar hacia arriba eleve la c√°mara
                currentY -= delta.y * rotationSpeed;
                
                // Limitar el √°ngulo vertical entre 5¬∞ y 60¬∞
                // 5¬∞ = vista casi horizontal (no puede ver debajo del target)
                // 60¬∞ = vista elevada pero no cenital completa
                currentY = Mathf.Clamp(currentY, 5f, 60f);
            }
        }

        // ========================================
        // SUBSECCI√ìN B: CONTROL CON MOUSE (PC) üñ±Ô∏è
        // ========================================
        
        // ------ INICIO DEL ARRASTRE ------
        // Al presionar el bot√≥n izquierdo del mouse Y no estar sobre UI
        if (Input.GetMouseButtonDown(0) && !IsPointerOverUI())
        {
            // Activar estado de arrastre
            isDragging = true;
            IsCameraDragging = true;
            
            // Guardar posici√≥n inicial del mouse para calcular deltas
            lastInputPos = Input.mousePosition;
        }
        
        // ------ FIN DEL ARRASTRE ------
        // Al soltar el bot√≥n izquierdo del mouse
        else if (Input.GetMouseButtonUp(0))
        {
            // Desactivar estado de arrastre
            isDragging = false;
            IsCameraDragging = false;
        }

        // ------ DURANTE EL ARRASTRE ------
        if (isDragging)
        {
            // Calcular cu√°nto se movi√≥ el mouse desde el √∫ltimo frame
            Vector2 delta = (Vector2)Input.mousePosition - lastInputPos;
            
            // Actualizar rotaci√≥n horizontal
            // Movimiento positivo en X = mouse hacia la derecha = girar c√°mara a la derecha
            currentX += delta.x * rotationSpeed;
            
            // Actualizar rotaci√≥n vertical
            // Invertimos delta.y por la misma raz√≥n que en touch
            currentY -= delta.y * rotationSpeed;
            
            // Limitar √°ngulo vertical
            currentY = Mathf.Clamp(currentY, 5f, 60f);
            
            // Actualizar la √∫ltima posici√≥n para el pr√≥ximo frame
            lastInputPos = Input.mousePosition;
        }
    }

    // ============================================
    // SECCI√ìN 5: ACTUALIZACI√ìN DE POSICI√ìN Y ROTACI√ìN
    // ============================================
    
    /// <summary>
    /// Se ejecuta despu√©s de Update, garantizando que el movimiento del jugador
    /// ya se haya procesado. Esto evita que la c√°mara "vibre" o "retrase".
    /// 
    /// PROCESO:
    /// 1. Convierte √°ngulos a rotaci√≥n quaternion
    /// 2. Calcula posici√≥n offset rotada
    /// 3. Posiciona la c√°mara alrededor del target
    /// 4. Hace que la c√°mara mire hacia el target
    /// </summary>
    void LateUpdate()
    {
        // Validar que hay un target asignado
        if (target == null) return;

        // ====== PASO 1: CREAR ROTACI√ìN ======
        
        // Convertir √°ngulos Euler (currentY, currentX) a Quaternion
        // Quaternion.Euler(pitch, yaw, roll)
        // - currentY = pitch (inclinaci√≥n vertical)
        // - currentX = yaw (rotaci√≥n horizontal)
        // - 0 = roll (no hay inclinaci√≥n lateral)
        Quaternion rotation = Quaternion.Euler(currentY, currentX, 0);
        
        // ====== PASO 2: CALCULAR OFFSET DIRECCIONAL ======
        
        // Vector offset base en espacio local:
        // - X = 0: no hay desplazamiento lateral
        // - Y = height: elevaci√≥n de la c√°mara
        // - Z = -distance: la c√°mara est√° "detr√°s" (Z negativo mira hacia adelante)
        Vector3 direction = new Vector3(0, height, -distance);
        
        // ====== PASO 3: POSICIONAR LA C√ÅMARA ======
        
        // F√≥rmula final: Posici√≥n del target + offset rotado
        // rotation * direction rota el vector offset seg√∫n los √°ngulos actuales
        // Esto crea el efecto de √≥rbita alrededor del target
        transform.position = target.position + rotation * direction;
        
        // ====== PASO 4: ORIENTAR LA C√ÅMARA HACIA EL TARGET ======
        
        // Hacer que la c√°mara mire hacia el target
        // Vector3.up * 1.5f eleva ligeramente el punto de enfoque
        // (en lugar de mirar exactamente al centro del target, mira un poco arriba)
        // Esto crea un encuadre m√°s natural
        transform.LookAt(target.position + Vector3.up * 1.5f);
    }

    // ============================================
    // SECCI√ìN 6: DETECCI√ìN DE INTERFAZ GR√ÅFICA
    // ============================================
    
    /// <summary>
    /// Verifica si el puntero/touch est√° sobre un elemento de la UI.
    /// 
    /// PROP√ìSITO:
    /// Prevenir que la c√°mara gire cuando el usuario interact√∫a con botones,
    /// paneles u otros elementos de la interfaz.
    /// 
    /// EJEMPLO:
    /// - Usuario hace clic en el bot√≥n del dado
    /// - Sin esta verificaci√≥n: la c√°mara tambi√©n girar√≠a
    /// - Con esta verificaci√≥n: solo el bot√≥n recibe el input
    /// </summary>
    /// <returns>true si el puntero est√° sobre UI, false en caso contrario</returns>
    private bool IsPointerOverUI()
    {
        // EventSystem.current: Sistema de Unity que gestiona eventos de UI
        // IsPointerOverGameObject(): Devuelve true si el puntero est√° sobre UI
        return EventSystem.current != null && EventSystem.current.IsPointerOverGameObject();
    }
}

// ============================================
// MATEM√ÅTICA DE LA √ìRBITA EXPLICADA
// ============================================
/*
 * SISTEMA DE COORDENADAS:
 * 
 * La c√°mara orbita alrededor del target usando coordenadas esf√©ricas:
 * 
 *         Y (altura)
 *         ^
 *         |    / C√°mara
 *         |   /
 *         |  / distance
 *         | /
 *         |/___currentX_____> X
 *        Target
 *       /
 *      / currentY (√°ngulo vertical)
 *     Z
 * 
 * TRANSFORMACI√ìN:
 * 1. Definimos offset base: (0, height, -distance)
 * 2. Creamos rotaci√≥n desde √°ngulos: Quaternion.Euler(currentY, currentX, 0)
 * 3. Rotamos el offset: rotation * direction
 * 4. Sumamos al target: target.position + offset_rotado
 * 
 * RESULTADO:
 * La c√°mara siempre mantiene la distancia y altura configuradas,
 * pero rota libremente alrededor del target seg√∫n el input del usuario.
 */

// ============================================
// DIFERENCIAS ENTRE TOUCH Y MOUSE
// ============================================
/*
 * TOUCH (M√ìVIL):
 * ‚úì Detecta fases: Began, Moved, Ended, Canceled
 * ‚úì Proporciona delta autom√°ticamente (touch.deltaPosition)
 * ‚úì Multi-touch nativo (pero este script usa solo 1 dedo)
 * ‚úì No necesita tracking manual de posici√≥n
 * 
 * MOUSE (PC):
 * ‚úì Usa eventos de bot√≥n: Down, Up
 * ‚úì Requiere calcular delta manualmente (posici√≥n actual - anterior)
 * ‚úì Necesita variable isDragging para tracking de estado
 * ‚úì Debe guardar lastInputPos para calcular movimiento
 * 
 * UNIFICACI√ìN:
 * Ambos sistemas actualizan las mismas variables (currentX, currentY),
 * por lo que el c√≥digo de LateUpdate funciona id√©nticamente para ambos.
 */

// ============================================
// CASOS DE USO Y CONSIDERACIONES
// ============================================
/*
 * CU√ÅNDO USAR ESTA C√ÅMARA:
 * ‚úì Juegos de mesa en 3D (como este proyecto)
 * ‚úì Visualizadores de modelos 3D
 * ‚úì Juegos de estrategia con vista de tablero
 * ‚úì Aplicaciones que requieren inspecci√≥n de objetos
 * 
 * LIMITACIONES:
 * - Solo rota alrededor del target (no se traslada)
 * - No tiene zoom (podr√≠a agregarse ajustando 'distance')
 * - No tiene colisi√≥n con geometr√≠a del nivel
 * 
 * MEJORAS POSIBLES:
 * 1. Agregar zoom con scroll del mouse o pinch en m√≥vil
 * 2. Suavizado de movimiento (lerp/damping)
 * 3. Detecci√≥n de colisiones con el entorno
 * 4. M√∫ltiples targets o transici√≥n entre targets
 * 5. Shake effects para eventos especiales
 */